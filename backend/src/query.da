import json
import websocket
# import _thread
# import time
# import rel

from file_utils import get_datasets_json, get_config

config = get_config()
host, port = config["ws_host"], config["ws_port"]
assert host and port, "Failed to load host and port from config.json!"

graph_data = get_datasets_json("full_graph_data.json")

courses = ["CSE 320", "AMS 261"]
prereqs = [(link["source"], link["target"]) for link in graph_data["links"]]


def rules(name=infinite_prereq_reach):
    reach(x), if_(source(x))
    reach(x), if_(prereq(x, y), reach(y))

# def rules(name=prereq_reach):
#     reach(x, 0), if_(source(x))
#     reach(x, n), if_(prereq(x, y), reach(y, n-1))


inf = infer(rules=infinite_prereq_reach, bindings=[
    ('prereq', prereqs), ('source', courses)], queries=['reach'])

ws = websocket.create_connection(f"ws://{host}:{port}")
msg = json.dumps({"type": "haha", "data": list(inf)})
ws.send(msg)
ws.close()

# class Query:
#     def __init__(self):
#         self.data = get_datasets_json("full_graph_data.json")

#     def query_courses(self, courses: List[str], show_direct_prerequisites: bool, show_transitive_prerequisites: bool, show_disconnected_courses: bool):
#         node_ids = {node["course_number"] for node in self.data["nodes"]}
#         node_ids = {course for course in node_ids if course in courses}
#         if not node_ids:
#             raise Exception(
#                 "No matching courses found from course/department!")
#         if show_direct_prerequisites:
#             link_source_ids = {
#                 link["source"] for link in self.data["links"] if link["target"] in node_ids}
#             self.data["nodes"] = [node for node in self.data["nodes"]
#                                         if node["course_number"] in node_ids or node["course_number"] in link_source_ids]
#             self.data["links"] = [
#                 link for link in self.data["links"] if link["target"] in node_ids]
#         else:
#             self.data["nodes"] = [
#                 node for node in self.data["nodes"] if node["course_number"] in node_ids]
#             self.data["links"] = [link for link in self.data["links"]
#                                         if link["source"] in node_ids and link["target"] in node_ids]
#         if show_transitive_prerequisites:
#             # TODO: implement transitive prerequisites
#             pass
#         if not show_disconnected_courses and self.data["links"]:
#             courses_in_links = {link["source"] for link in self.data["links"]} | {
#                 link["target"] for link in self.data["links"]}
#             self.data["nodes"] = [
#                 node for node in self.data["nodes"] if node["course_number"] in courses_in_links]
#         write_to_datasets_json("queried_graph_data.json", self.data)
#         return self.data

#     def query_departments(self, departments: List[str], show_direct_prerequisites: bool, show_transitive_prerequisites: bool, show_disconnected_courses: bool):
#         node_ids = {node["course_number"] for node in self.data["nodes"]}
#         node_ids = {course for course in node_ids if course[:3] in departments}
#         if not node_ids:
#             raise Exception(
#                 "No matching courses found from course/department!")
#         if show_direct_prerequisites:
#             link_source_ids = {
#                 link["source"] for link in self.data["links"] if link["target"] in node_ids}
#             self.data["nodes"] = [node for node in self.data["nodes"]
#                                         if node["course_number"] in node_ids or node["course_number"] in link_source_ids]
#             self.data["links"] = [
#                 link for link in self.data["links"] if link["target"] in node_ids]
#         else:
#             self.data["nodes"] = [
#                 node for node in self.data["nodes"] if node["course_number"] in node_ids]
#             self.data["links"] = [link for link in self.data["links"]
#                                         if link["source"] in node_ids and link["target"] in node_ids]
#         if show_transitive_prerequisites:
#             # TODO: implement transitive prerequisites
#             pass
#         if not show_disconnected_courses and self.data["links"]:
#             courses_in_links = {link["source"] for link in self.data["links"]} | {
#                 link["target"] for link in self.data["links"]}
#             self.data["nodes"] = [
#                 node for node in self.data["nodes"] if node["course_number"] in courses_in_links]
#         write_to_datasets_json("queried_graph_data.json", self.data)
#         return self.data

#     def query_all(self, show_direct_prerequisites: bool, show_transitive_prerequisites: bool, show_disconnected_courses: bool):
#         if show_direct_prerequisites:
